//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Shapes
{

    [Serializable]
    public class MyClass
    {
        public string title;
        public string description;

        public MyClass(string title, string description)
        {
            this.title = title;
            this.description = description;
        }

        public void Print()
        {
            Console.WriteLine(this.title);
            Console.WriteLine();
            Console.WriteLine(this.description);
        }
    }
    public class Triangle : Shape
    {
        //    MyClass mc = new MyClass("C++ Rocks", "Yes I know it is true.");
        public virtual double legB
        {
            get;
            set;
        }

        public virtual double legA
        {
            get;
            set;
        }

        public virtual double hypo
        {
            get;
            set;
        }

        public override double CalculateArea(object[] args)
        {
            legA = (double)args[0];
            legB = (double)args[1];
            hypo = (double)args[2];

            if (legA > 0 && legB == -1 && hypo > 0)
                return 0.5 * legA * CalculateCircumference(new object[] { legA, legB, hypo });
            else if (legA == -1 && legB > 0 && hypo > 0)
                return 0.5 * CalculateCircumference(new object[] { legA, legB, hypo }) * legB;
            else if (legA > 0 && legB > 0)
                return 0.5 * legA * legB;

            return -1;
        }

        public override double CalculateCircumference(object[] args)
        {
            legA = (double)args[0];
            legB = (double)args[1];
            hypo = (double)args[2];

            if (legA > 0 && legB > 0 && hypo == -1)
                return Math.Sqrt(Math.Pow(legA, 2) + Math.Pow(legB, 2));
            else if (legA > 0 && legB == -1 && hypo > 0)
                return Math.Sqrt(Math.Pow(hypo, 2) - Math.Pow(legA, 2));
            else if (legA == -1 && legB > 0 && hypo > 0)
                return Math.Sqrt(Math.Pow(hypo, 2) - Math.Pow(legB, 2));

            return -1;
        }

    }

}